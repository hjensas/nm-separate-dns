#!/bin/sh
#
# Generate dnsmasq config files per connection to separate dns queries.
# Copyright (C) 2013, 2014    Niels de Vos <niels@nixpanic.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the
#  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
#  Boston, MA  02110-1301  USA
#

DNSMASQ_RESOLV=/etc/dnsmasq.d/resolv-${CONNECTION_UUID}.conf

# for debugging
set > /tmp/90-update-resolv.log

function write_dnsmasq_header
{
 if [ ! -e ${DNSMASQ_RESOLV} ]
 then
  echo "# ${DNSMASQ_RESOLV} generated on $(date)" > ${DNSMASQ_RESOLV}
  echo "# Generator: ${0}" >> ${DNSMASQ_RESOLV}
  echo "# Connection NAME: ${CONNECTION_ID}" >> ${DNSMASQ_RESOLV}
  echo "# Connection UUID: ${CONNECTION_UUID}" >> ${DNSMASQ_RESOLV}
  echo "#" >> ${DNSMASQ_RESOLV}
 fi
}

function create_dnsmasq_config_env
{
 local NS

 # Keep the current config if no DHCP4_IP_ADDRESS set.
 [ -z "${DHCP4_IP_ADDRESS}" ] && return

 write_dnsmasq_header

 echo "# IP4_NAMESERVERS: ${IP4_NAMESERVERS}" >> ${DNSMASQ_RESOLV}
 echo "# IP4_DOMAINS: ${IP4_DOMAINS}" >> ${DNSMASQ_RESOLV}
 echo "# DHCP4_DOMAIN_SEARCH: ${DHCP4_DOMAIN_SEARCH}" >> ${DNSMASQ_RESOLV}
 echo "#" >> ${DNSMASQ_RESOLV}

 for NS in ${IP4_NAMESERVERS}
 do
  echo "server=${NS}" >> ${DNSMASQ_RESOLV}
 done
}

function create_dnsmasq_vpn_config
{
 local NS
 local DOMAIN=""

 write_dnsmasq_header

 echo "DHCP4_DOMAIN_SEARCH: ${DHCP4_DOMAIN_SEARCH}"
 echo "DHCP4_DOMAIN_NAME_SERVERS: ${DHCP4_DOMAIN_NAME_SERVERS}"

 for DOMAIN in ${VPN_IP4_DOMAINS}
 do
  # make sure the DOMAIN is not from an other config
  grep -q -E "# IP4_DOMAINS:.* ${DOMAIN}" /etc/dnsmasq.d/resolv-*.conf && continue

  for NS in ${VPN_IP4_NAMESERVERS}
  do
   # make sure the NS is not from an other config
   grep -q "[=/]${NS}\$" /etc/dnsmasq.d/resolv-*.conf && continue
   # FIXME: skip any IPv6 nameservers, this is sad
   grep -q ':' <<< "${NS}" && continue

   echo "server=/${DOMAIN}/${NS}" >> ${DNSMASQ_RESOLV}
  done
 done
}

function remove_dnsmasq_config
{
 rm -f ${DNSMASQ_RESOLV}
}

function remove_stale_configs
{
 local CONF
 local UUID

 for CONF in /etc/dnsmasq.d/resolv-*.conf
 do
  # in case of a wildcard error
  [ -e "${CONF}" ] || continue

  UUID=$(awk '/^# Connection UUID: / {print $4}' ${CONF})
  if ! ( nmcli -t -f UUID connection show --active | grep -q "^${UUID}\$" )
  then
   rm -f ${CONF}
  fi
 done
}

function reload_dnsmasq
{
 cat << _EOF > /etc/resolv.conf
# /etc/resolv.conf generated on $(date)
# Generator: $0
#
# dnsmasq used for per connection dns servers.
# See /etc/dnsmasq.d/resolve-*.conf
nameserver 127.0.0.1
_EOF
 [ -n "${DHCP4_DOMAIN_SEARCH}" ] && echo "search ${DHCP4_DOMAIN_SEARCH}" >> /etc/resolv.conf
 # "killall -HUP dnsmasq" is not sufficient for new files
 /sbin/service dnsmasq restart 2>&1 > /dev/null
}

case "$2" in
 "up"|"dhcp-change")
  remove_stale_configs
  create_dnsmasq_config_env
  reload_dnsmasq
  ;;
 "vpn-up")
  remove_stale_configs
  create_dnsmasq_vpn_config
  reload_dnsmasq
  ;;
 "down")
  remove_stale_configs
  remove_dnsmasq_config
  reload_dnsmasq
  ;;
 "vpn-down")
  remove_stale_configs
  remove_dnsmasq_config
  reload_dnsmasq
  ;;
esac
